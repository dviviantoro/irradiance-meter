#include <Arduino.h>
#include "RTClib.h"
#include <Wire.h>
#include "FS.h"
#include "SD.h"
#include "SPI.h"
#include <WiFi.h>
#include "Nextion.h"
#include <AsyncTCP.h>
#include <ArduinoJson.h>
#include <AsyncElegantOTA.h>
#include <WiFiClientSecure.h>
#include <ESPAsyncWebServer.h>
#include <UniversalTelegramBot.h>

#define preset1 5000
#define preset2 10000
#define preset3 15000
#define preset4 20000
#define preset5 25000
#define preset6 30000
#define preset7 35000
#define preset8 40000

byte newCharSquare[8] = {
  B01100,
  B10010,
  B00100,
  B01000,
  B11110,
  B00000,
  B00000,
  B00000
};
 
unsigned long time_1 = 0;
unsigned long time_2 = 0;
unsigned long time_3 = 0;

int currentPage = 0;
int ssidState = 0;
int slcDev1 = 0;
int slcDev2 = 0;
int slcDev3 = 0;

const int adc0 = 36;
const int adc1 = 26;
const int relay0 = 35;
int adc0Val = 0;
int adc1Val = 0;

int relay0State = 0;
int mainPowerState = 0;
int batPowerState = 0;
int sdCardState = 0;
int state1 = 0, state2 = 0, state3 = 0, stateMaster = 0;

const char* KNOWN_SSID[] = {"Galaxy-Deny", "INFORMATION CENTER"};
const char* KNOWN_PASSWORD[] = {"bismillah", "9000000000"};
const int   KNOWN_SSID_COUNT = sizeof(KNOWN_SSID) / sizeof(KNOWN_SSID[0]); // number of known networks

const char* resource = "trigger/irradiance/with/key/jto3ra7Ajzi5n2hr_SZ0bCBBKSjmDb-AQ5YRjlC0_Il";

#define SD_CS 5
#define RXD2 16
#define TXD2 17
// #define BOTtoken "1737474042:AAGk7scL0EVDONxnA5Tw5FfsCU2gLS8Egrk"  // your Bot Token (Get from Botfather)
#define BOTtoken "5917398507:AAFSCyGgvUH9LoeGT4Ch47d8yE3uMThglfw"  // your Bot Token (Get from Botfather)
// #define CHAT_ID "-465979089"    //group
#define CHAT_ID "-898094308"    //group irradiance
//#define CHAT_ID "691646481"   //saya

const char* serverIFTTT = "maker.ifttt.com";

RTC_DS1307 rtc;
WiFiClientSecure client;
AsyncWebServer server(80);
UniversalTelegramBot bot(BOTtoken, client);
char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
int value1 = 0, value2 = 0, value3 = 0;
double averageValue = 0;
const int Enable =  2;
int wifiState = 0;
int botRequestDelay = 1000;
unsigned long lastTimeBotRan;

String timestampDev1, timestampDev2, timestampDev3;

// Declare your Nextion objects - Example (page id = 0, component id = 1, component name = "b0") 
// Page 0 = booting page
NexPage page0 = NexPage(0, 0, "page0");
NexText tLog0 = NexText(0, 1, "tLog0");
NexText tLog1 = NexText(0, 2, "tLog1");
NexText tLog2 = NexText(0, 3, "tLog2");
NexText tLog3 = NexText(0, 4, "tLog3");
NexText tLog4 = NexText(0, 5, "tLog4");
NexText tLog5 = NexText(0, 6, "tLog5");
NexText tLog6 = NexText(0, 7, "tLog6");
NexText tLog7 = NexText(0, 8, "tLog7");
NexText tLog8 = NexText(0, 9, "tLog8");
NexText tLog9 = NexText(0, 10, "tLog9");
NexText tLog10 = NexText(0, 11, "tLog10");
NexText tLog11 = NexText(0, 12, "tLog11");
NexText tLog12 = NexText(0, 13, "tLog12");
NexText tLog13 = NexText(0, 14, "tLog13");
NexText tLog14 = NexText(0, 15, "tLog14");
NexText tLog15 = NexText(0, 16, "tLog15");
// Page 1 = home page
NexPage page1 = NexPage(1, 0, "page1");
NexPicture pDev1 = NexPicture(1, 6, "pDev1");
NexPicture pDev2 = NexPicture(1, 7, "pDev2");
NexPicture pDev3 = NexPicture(1, 8, "pDev3");
NexButton bDebug = NexButton(1, 1, "bDebug");
NexButton bKey = NexButton(1, 2, "bDKey");
NexButton bInfo = NexButton(1, 3, "bInfo");
NexText tValDev1 = NexText(1, 4, "tValDev1");
NexText tTimeDev1 = NexText(1, 5, "tTimeDev1");
NexText tSampling1 = NexText(1, 14, "tSampling1");
NexText tValDev2 = NexText(1, 9, "tValDev2");
NexText tTimeDev2 = NexText(1, 10, "tTimeDev2");
NexText tSampling2 = NexText(1, 15, "tSampling2");
NexText tValDev3 = NexText(1, 12, "tValDev3");
NexText tTimeDev3 = NexText(1, 11, "tTimeDev3");
NexText tSampling3 = NexText(1, 16, "tSampling3");
NexText tProgress = NexText(1, 13, "tProgress");
NexText tWifi = NexText(1, 19, "tWifi");
NexText tIP = NexText(1, 20, "tIP");
NexText tValAvg = NexText(1, 17, "tValAvg");
NexText tTimeAvg = NexText(1, 18, "tTimeAvg");
// Page 1 = config device1 page
NexPage page2 = NexPage(2, 0, "page2");
NexButton bPreset1Dev1 = NexButton(2, 1, "bPreset1Dev1");
NexButton bPreset2Dev1 = NexButton(2, 2, "bPreset2Dev1");
NexButton bPreset3Dev1 = NexButton(2, 3, "bPreset3Dev1");
NexButton bPreset4Dev1 = NexButton(2, 4, "bPreset4Dev1");
NexButton bPreset5Dev1 = NexButton(2, 5, "bPreset5Dev1");
NexButton bPreset6Dev1 = NexButton(2, 6, "bPreset6Dev1");
NexButton bPreset7Dev1 = NexButton(2, 7, "bPreset7Dev1");
NexButton bPreset8Dev1 = NexButton(2, 8, "bPreset8Dev1");
// Page 1 = config device2 page
NexPage page3 = NexPage(3, 0, "page3");
NexButton bPreset1Dev2 = NexButton(3, 1, "bPreset1Dev2");
NexButton bPreset2Dev2 = NexButton(3, 2, "bPreset2Dev2");
NexButton bPreset3Dev2 = NexButton(3, 3, "bPreset3Dev2");
NexButton bPreset4Dev2 = NexButton(3, 4, "bPreset4Dev2");
NexButton bPreset5Dev2 = NexButton(3, 5, "bPreset5Dev2");
NexButton bPreset6Dev2 = NexButton(3, 6, "bPreset6Dev2");
NexButton bPreset7Dev2 = NexButton(3, 7, "bPreset7Dev2");
NexButton bPreset8Dev2 = NexButton(3, 8, "bPreset8Dev2");
// Page 1 = config device3 page
NexPage page4 = NexPage(4, 0, "page4");
NexButton bPreset1Dev3 = NexButton(4, 1, "bPreset1Dev3");
NexButton bPreset2Dev3 = NexButton(4, 2, "bPreset2Dev3");
NexButton bPreset3Dev3 = NexButton(4, 3, "bPreset3Dev3");
NexButton bPreset4Dev3 = NexButton(4, 4, "bPreset4Dev3");
NexButton bPreset5Dev3 = NexButton(4, 5, "bPreset5Dev3");
NexButton bPreset6Dev3 = NexButton(4, 6, "bPreset6Dev3");
NexButton bPreset7Dev3 = NexButton(4, 7, "bPreset7Dev3");
NexButton bPreset8Dev3 = NexButton(4, 8, "bPreset8Dev3");
// Page 5 = info
NexPage page5 = NexPage(5, 0, "page5");
NexButton bInfoWA = NexButton(5, 1, "bInfoWA");
NexButton bInfoTele = NexButton(5, 2, "bInfoTele");
NexButton bInfoMail = NexButton(5, 3, "bInfoMail");
NexButton bInfoHome = NexButton(5, 4, "bInfoHome");
// Page contact me - whatsapp
NexPage page6 = NexPage(6, 0, "page6");
NexButton bInfoWAHome = NexButton(6, 1, "bInfoWAHome");
// Page contact me - telegram
NexPage page7 = NexPage(7, 0, "page7");
NexButton bInfoTeleHome = NexButton(7, 1, "bInfoTeleHome");
// Page contact me - mail
NexPage page8 = NexPage(8, 0, "page8");
NexButton bInfoMailHome = NexButton(8, 1, "bInfoMailHome");
// Page Key
NexPage page9 = NexPage(9, 0, "page9");
NexButton bKeyTele = NexButton(9, 1, "bKeyTele");
NexButton bKeyGraph = NexButton(9, 2, "bKeyGraph");
NexButton bKeySheet = NexButton(9, 3, "bKeySheet");
NexButton bKeyHome = NexButton(9, 4, "bHome5");
// Page key - telegram group
NexPage page10 = NexPage(10, 0, "page10");
NexButton bKeyTeleHome = NexButton(10, 1, "bKeyTeleHome");
// Page key - graph
NexPage page11 = NexPage(11, 0, "page11");
NexButton bKeyGraphHome = NexButton(11, 1, "bKeyGraphHome");
// Page key - spreadsheet
NexPage page12 = NexPage(12, 0, "page12");
NexButton bKeySheetHome = NexButton(12, 1, "bKeySheetHome");

NexTouch *nex_listen_list[] = {
  &page0,

  &page1,
  &pDev1,
  &pDev2,
  &pDev3,
  &bDebug,
  &bKey,
  &bInfo,

  &page2,
  &bPreset1Dev1,
  &bPreset2Dev1,
  &bPreset3Dev1,
  &bPreset4Dev1,
  &bPreset5Dev1,
  &bPreset6Dev1,
  &bPreset7Dev1,
  &bPreset8Dev1,

  &page3,
  &bPreset1Dev2,
  &bPreset2Dev2,
  &bPreset3Dev2,
  &bPreset4Dev2,
  &bPreset5Dev2,
  &bPreset6Dev2,
  &bPreset7Dev2,
  &bPreset8Dev2,

  &page4,
  &bPreset1Dev3,
  &bPreset2Dev3,
  &bPreset3Dev3,
  &bPreset4Dev3,
  &bPreset5Dev3,
  &bPreset6Dev3,
  &bPreset7Dev3,
  &bPreset8Dev3,

  &bKeyTele,
  &bKeyGraph,
  &bKeySheet,
  &bKeyHome,
  &bKeyTeleHome,
  &bKeyGraphHome,
  &bKeySheetHome,

  &bInfoWA,
  &bInfoTele,
  &bInfoMail,
  &bInfoWAHome,
  &bInfoTeleHome,
  &bInfoMailHome,

  &page5,
  &page6,
  &page7,
  &page8,
  &page9,
  &page10,
  &page11,
  &page12,
  NULL
};

void page0PopCallback(void *ptr) {currentPage = 1;}
void tLog0PopCallback(void *ptr) {currentPage = 1;}
void tLog1PopCallback(void *ptr) {currentPage = 1;}
void tLog2PopCallback(void *ptr) {currentPage = 1;}
void tLog3PopCallback(void *ptr) {currentPage = 1;}
void tLog4PopCallback(void *ptr) {currentPage = 1;}
void tLog5PopCallback(void *ptr) {currentPage = 1;}
void tLog6PopCallback(void *ptr) {currentPage = 1;}
void tLog7PopCallback(void *ptr) {currentPage = 1;}
void tLog8PopCallback(void *ptr) {currentPage = 1;}
void tLog9PopCallback(void *ptr) {currentPage = 1;}
void tLog10PopCallback(void *ptr) {currentPage = 1;}
void tLog11PopCallback(void *ptr) {currentPage = 1;}
void tLog12PopCallback(void *ptr) {currentPage = 1;}
void tLog13PopCallback(void *ptr) {currentPage = 1;}
void tLog14PopCallback(void *ptr) {currentPage = 1;}
void tLog15PopCallback(void *ptr) {currentPage = 1;}
void pDev1PopCallback(void *ptr) {currentPage = 2;}
void pDev2PopCallback(void *ptr) {currentPage = 3;}
void pDev3PopCallback(void *ptr) {currentPage = 4;}
void bDebugPopCallback(void *ptr) {currentPage = 0;}
void bKeyPopCallback(void *ptr) {currentPage = 5;}
void bKeyHomePopCallback(void *ptr) {currentPage = 1;}
void bKeyTelePopCallback(void *ptr) {currentPage = 6;}
void bKeyTeleHomePopCallback(void *ptr) {currentPage = 1;}
void bKeyGraphPopCallback(void *ptr) {currentPage = 7;}
void bKeyGraphHomePopCallback(void *ptr) {currentPage = 1;}
void bKeySheetPopCallback(void *ptr) {currentPage = 8;}
void bKeySheetHomePopCallback(void *ptr) {currentPage = 1;}
void bInfoPopCallback(void *ptr) {currentPage = 9;}
void bInfoPopHomeCallback(void *ptr) {currentPage = 1;}
void bInfoWAPopCallback(void *ptr) {currentPage = 10;}
void bInfoWAHomePopCallback(void *ptr) {currentPage = 1;}
void bInfoTelePopCallback(void *ptr) {currentPage = 11;}
void bInfoTeleHomePopCallback(void *ptr) {currentPage = 1;}
void bInfoMailPopCallback(void *ptr) {currentPage = 12;}
void bInfoMailHomePopCallback(void *ptr) {currentPage = 1;}

void bPreset1Dev1PopCallback(void *ptr) {slcDev1 = preset1;}
void bPreset2Dev1PopCallback(void *ptr) {slcDev1 = preset2;}
void bPreset3Dev1PopCallback(void *ptr) {slcDev1 = preset3;}
void bPreset4Dev1PopCallback(void *ptr) {slcDev1 = preset4;}
void bPreset5Dev1PopCallback(void *ptr) {slcDev1 = preset5;}
void bPreset6Dev1PopCallback(void *ptr) {slcDev1 = preset6;}
void bPreset7Dev1PopCallback(void *ptr) {slcDev1 = preset7;}
void bPreset8Dev1PopCallback(void *ptr) {slcDev1 = preset8;}

void bPreset1Dev2PopCallback(void *ptr) {slcDev2 = preset1 + 100;}
void bPreset2Dev2PopCallback(void *ptr) {slcDev2 = preset2 + 100;}
void bPreset3Dev2PopCallback(void *ptr) {slcDev2 = preset3 + 100;}
void bPreset4Dev2PopCallback(void *ptr) {slcDev2 = preset4 + 100;}
void bPreset5Dev2PopCallback(void *ptr) {slcDev2 = preset5 + 100;}
void bPreset6Dev2PopCallback(void *ptr) {slcDev2 = preset6 + 100;}
void bPreset7Dev2PopCallback(void *ptr) {slcDev2 = preset7 + 100;}
void bPreset8Dev2PopCallback(void *ptr) {slcDev2 = preset8 + 100;}

void bPreset1Dev3PopCallback(void *ptr) {slcDev3 = preset1 + 200;}
void bPreset2Dev3PopCallback(void *ptr) {slcDev3 = preset2 + 200;}
void bPreset3Dev3PopCallback(void *ptr) {slcDev3 = preset3 + 200;}
void bPreset4Dev3PopCallback(void *ptr) {slcDev3 = preset4 + 200;}
void bPreset5Dev3PopCallback(void *ptr) {slcDev3 = preset5 + 200;}
void bPreset6Dev3PopCallback(void *ptr) {slcDev3 = preset6 + 200;}
void bPreset7Dev3PopCallback(void *ptr) {slcDev3 = preset7 + 200;}
void bPreset8Dev3PopCallback(void *ptr) {slcDev3 = preset8 + 200;}

void writeFile(fs::FS &fs, String path, String message){
// void writeFile(fs::FS &fs, const char * path, String message){
    Serial.printf("Writing file: %s\n", path);

    File file = fs.open(path, FILE_WRITE);
    if(!file){
        Serial.println("Failed to open file for writing");
        return;
    }
    if(file.println(message)){
        Serial.println("File written");
    } else {
        Serial.println("Write failed");
    }
    file.close();
}

void readFile(fs::FS &fs, const char * path){
    Serial.printf("Reading file: %s\n", path);

    File file = fs.open(path);
    if(!file){
        Serial.println("Failed to open file for reading");
        return;
    }

    Serial.print("Read from file: ");
    while(file.available()){
        Serial.write(file.read());
    }
    file.close();
}

String getValue(String data, char separator, int index)
{
  int found = 0;
  int strIndex[] = {0, -1};
  int maxIndex = data.length()-1;

  for(int i=0; i<=maxIndex && found<=index; i++){
    if(data.charAt(i)==separator || i==maxIndex){
        found++;
        strIndex[0] = strIndex[1]+1;
        strIndex[1] = (i == maxIndex) ? i+1 : i;
    }
  }

  return found>index ? data.substring(strIndex[0], strIndex[1]) : "";
}

void printnextion() {
  Serial.write(0xff);
  Serial.write(0xff);
  Serial.write(0xff);
}

void listen() {
  while(Serial2.available()) {
    String str = Serial2.readString();
    String part01 = getValue(str,';',0);
    String part02 = getValue(str,';',1);

    if (part01 == "rt1" && part02 == "1") {
      state1 == 1;
    } else if (part01 == "rt2" && part02 == "1") {
      state2 == 1;
    } else if (part01 == "rt3" && part02 == "1") {
      state3 == 1;
    }

    if (part01 == "ra1") {
      value1 = part02.toInt();
    } else if (part01 == "ra2") {
      value2 = part02.toInt();
    } else if (part01 == "ra3") {
      value3 = part02.toInt();
    }
  }
}

void checkPeripheral() {
  // di nextion dikasih inisiasi "Establishing serial communication . . ."
  Serial.print("tLog1.txt=\"");
  Serial.print("Serial communication established\"");
  printnextion();

  Serial.print("tLog2.txt=\"");
  Serial.print("Initializing SD card . . .\"");
  printnextion();

  if (SD.begin()) {
    sdCardState == 1;
    Serial.print("tLog3.txt=\"");
    Serial.print("[OK] SD card mount success\"");
    printnextion();
  
    Serial.print("tLog4.txt=\"");
    uint8_t cardType = SD.cardType();
    if(cardType == CARD_NONE) {
      Serial.print("No SD card attached\"");
      return;
    }
    Serial.print("Initializing SD card type . . .\"");
    printnextion();

    Serial.print("tLog5.txt=\"");
    if(cardType == CARD_MMC){
      Serial.print("SD Card type is MMC\"");
    } else if(cardType == CARD_SD){
      Serial.print("SD Card type is SDSC\"");
    } else if(cardType == CARD_SDHC){
      Serial.print("SD Card type is SDHC\"");
    } else {
      Serial.print("SD Card type is unknown\"");
    }
    printnextion();
    
    uint64_t cardSize = SD.cardSize() / (1024 * 1024);
    Serial.print("tLog6.txt=\"");
    Serial.printf("SD card size: %lluMB\n\"", cardSize);
    printnextion();
  } else if (!SD.begin()) {
    Serial.print("tLog3.txt=\"");
    Serial.print("[ERROR] SD card failed\"");
    printnextion();
  }

  // check slave-1 connection
  Serial.print("tLog7.txt=\"");
  Serial.print("Establishing modbus RS485 communication (Device-1) . . .\"");
  printnextion();

  // Serial2.print("I");
  // Serial2.print("1");
  // Serial2.print("T"); // test
  // Serial2.print("F");
  Serial2.print("t1");
  Serial2.flush();
  listen();
  listen();

  if (state1 == 1) {
    Serial.print("tLog8.txt=\"");
    Serial.print("[OK] Slave-1 communication established\"");
    printnextion();
    Serial.print("pDev1.pic=13\"");
    printnextion();
  } else {
    Serial.print("tLog8.txt=\"");
    Serial.print("[ERROR]\"");
    printnextion();
    Serial.print("pDev1.pic=13\"");
    printnextion();
  }
  
/*
  if(Serial2.find("i")) {
    bool slave1 = Serial2.find("1");   
    if(slave1 == true) {
      state1 = Serial2.parseInt();
      if(Serial2.read() == 'f' && slave1 == true) {
        Serial.print("tLog8.txt=\"");
        Serial.print("[OK] Slave-1 communication established\"");
        printnextion();
        Serial.print("pDev1.pic=13\"");
        printnextion();

        Serial2.print("I");
        Serial2.print("1");
        Serial2.print("L");
        Serial2.print("F");
        Serial2.flush();
        
        if(Serial2.find("i")) {   
          int slave1 = Serial2.parseInt();
          value1 = Serial2.parseInt();
          if(Serial2.read() == 'f' && slave1 == 1) {
            Serial.print("tValDev1.txt=\"");
            Serial.print(value1);
            Serial.print("\"");
            printnextion();
            Serial.print("tTimeDev1.txt=\"");
            Serial.print("startup");
            Serial.print("\"");
            printnextion();
          }
        }
      }
    }
  } else {
    Serial.print("tLog8.txt=\"");
    Serial.print("[ERROR] Slave-1 communication failed\"");
    printnextion();
  }
  */
  /*
  if(Serial2.find("i")) {   
      int slave1 = Serial2.parseInt();
      value1 = Serial2.parseInt();

      if(Serial2.read() == 'f' && slave1 == 1) {
        state1 = 1;
        Serial.print("tLog8.txt=\"");
        Serial.print("[OK] Slave-1 communication established\"");
        printnextion();
        Serial.print("pDev1.pic=13\"");
        printnextion();

        Serial2.print("I");
        Serial2.print("1");
        Serial2.print("L");
        Serial2.print("F");
        Serial2.flush();
        
        if(Serial2.find("i")) {   
          int slave1 = Serial2.parseInt();
          value1 = Serial2.parseInt();
          if(Serial2.read() == 'f' && slave1 == 1) {
            Serial.print("tValDev1.txt=\"");
            Serial.print(value1);
            Serial.print("\"");
            printnextion();
            Serial.print("tTimeDev1.txt=\"");
            Serial.print("startup");
            Serial.print("\"");
            printnextion();
          }
        }
      }
  } else {
    Serial.print("tLog8.txt=\"");
    Serial.print("[ERROR] Slave-1 communication failed\"");
    printnextion();
  }
  */

  // check slave-2 connection
  Serial.print("tLog9.txt=\"");
  Serial.print("Establishing modbus RS485 communication (Device-2) . . .\"");
  printnextion();

  Serial2.print("I");
  Serial2.print("2");
  Serial2.print("T"); // test
  Serial2.print("F");
  Serial2.flush();
  
  if(Serial2.find("i")) {   
      int slave2 = Serial2.parseInt();
      value2 = Serial2.parseInt();

      if(Serial2.read() == 'f' && slave2 == 2) {
        state2 = 1;
        Serial.print("tLog10.txt=\"");
        Serial.print("[OK] Slave-2 communication established\"");
        printnextion();
        Serial.print("pDev2.pic=13\"");
        printnextion();

        Serial2.print("I");
        Serial2.print("2");
        Serial2.print("L");
        Serial2.print("F");
        Serial2.flush();
        
        if(Serial2.find("i")) {   
          int slave2 = Serial2.parseInt();
          value2 = Serial2.parseInt();
          if(Serial2.read() == 'f' && slave2 == 2) {
            Serial.print("tVal2.txt=\"");
            Serial.print(value2);
            Serial.print("\"");
            printnextion();
            Serial.print("tTime2.txt=\"");
            Serial.print("startup");
            Serial.print("\"");
            printnextion();
          }
        }
      }
  } else {
    Serial.print("tLog10.txt=\"");
    Serial.print("[ERROR] Slave-2 communication failed\"");
    printnextion();
  }

  // check slave-3 connection
  Serial.print("tLog11.txt=\"");
  Serial.print("Establishing modbus RS485 communication (Device-3) . . .\"");
  printnextion();

  Serial2.print("I");
  Serial2.print("3");
  Serial2.print("T"); // test
  Serial2.print("F");
  Serial2.flush();
  
  if(Serial2.find("i")) {   
      int slave3 = Serial2.parseInt();
      value3 = Serial2.parseInt();

      if(Serial2.read() == 'f' && slave3 == 1) {
        state3 = 1;
        Serial.print("tLog12.txt=\"");
        Serial.print("[OK] Slave-3 communication established\"");
        printnextion();
        Serial.print("pDev3.pic=13\"");
        printnextion();

        Serial2.print("I");
        Serial2.print("3");
        Serial2.print("L");
        Serial2.print("F");
        Serial2.flush();
        
        if(Serial2.find("i")) {   
          int slave3 = Serial2.parseInt();
          value3 = Serial2.parseInt();
          if(Serial2.read() == 'f' && slave3 == 1) {
            Serial.print("tVal3.txt=\"");
            Serial.print(value3);
            Serial.print("\"");
            printnextion();
            Serial.print("tTime3.txt=\"");
            Serial.print("startup");
            Serial.print("\"");
            printnextion();
          }
        }
      }
  } else {
    Serial.print("tLog12.txt=\"");
    Serial.print("[ERROR] Slave-3 communication failed\"");
    printnextion();
  }

  // Check RTC
  Serial.print("tLog13.txt=\"");
  Serial.print("Establishing real time clock communication . . .\"");
  printnextion();

  Serial.print("tLog14.txt=\"");
  if (! rtc.begin()) {
    // Serial2.println("Couldn't find RTC");
    Serial.print("[ERROR] Real time clock communication\"");
    printnextion();
    // while (1) delay(10);
  }
  Serial.print("[OK] Real time clock communication\"");
  printnextion();

  // if (! rtc.isrunning()) {
    // Serial2.println("RTC is NOT running, let's set the time!");
    // When time needs to be set on a new device, or after a power loss, the
    // following line sets the RTC to the date & time this sketch was compiled
    // rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    // This line sets the RTC with an explicit date & time, for example to set
    // January 21, 2014 at 3am you would call:
    // rtc.adjust(DateTime(2014, 1, 21, 3, 0, 0));
  // }

  
  // Check internet connection
}

void handleNewMessages(int numNewMessages) {
  DateTime now = rtc.now();

  Serial.println("handleNewMessages");
  Serial.println(String(numNewMessages));

  for (int i=0; i<numNewMessages; i++) {
    // Chat id of the requester
    String chat_id = String(bot.messages[i].chat_id);
    if (chat_id != CHAT_ID){
      bot.sendMessage(chat_id, "Unauthorized user", "");
      continue;
    }
    
    // Print the received message
    String text = bot.messages[i].text;
    Serial.println(text);

    String from_name = bot.messages[i].from_name;

    if (text == "/start") {
      String welcome = "Welcome, " + from_name + ".\n";
      welcome += "Use the following commands to control your outputs.\n\n";
      welcome += "/start to request command list \n";
      welcome += "/now to request current update \n";
      bot.sendMessage(chat_id, welcome, "");
    }

    if (text == "/now") {
      String messageTelegram = "Updated report Irradiance Meter IRM.V01 by Pesawat Sederhana \n\n";
      messageTelegram = String(now.hour(), DEC) + String(":");
      messageTelegram = messageTelegram + String(now.minute(), DEC) + String(":");
      messageTelegram = messageTelegram + String(now.second(), DEC) + String(" - ");
      messageTelegram = messageTelegram + String(daysOfTheWeek[now.dayOfTheWeek()]) + String(", ");
      messageTelegram = messageTelegram + String(now.day(), DEC) + String("/");
      messageTelegram = messageTelegram + String(now.month(), DEC) + String("/");
      messageTelegram = messageTelegram + String(now.year(), DEC) + "\n\n";

      if (state1 == 1) {
        messageTelegram = messageTelegram + String("Device 1 = ") + String(value1) + String(" W/m2") + String(" at") + String(timestampDev1) + String("\n");
      } else if ( state1 == 0) {
        messageTelegram = messageTelegram + String("Device 1 = ") + String("OFFLINE") + String("\n");
      }
      if (state2 == 1) {
        messageTelegram = messageTelegram + String("Device 2 = ") + String(value2) + String(" W/m2") + String(" at") + String(timestampDev2) + String("\n");
      } else if ( state2 == 0) {
        messageTelegram = messageTelegram + String("Device 2 = ") + String("OFFLINE") + String("\n");
      }
      if (state3 == 1) {
        messageTelegram = messageTelegram + String("Device 3 = ") + String(value3) + String(" W/m2") + String(" at") + String(timestampDev3) + String("\n");
      } else if (state3 == 0) {
        messageTelegram = messageTelegram + String("Device 3 = ") + String("OFFLINE") + String("\n");
      }
      /*
      messageTelegram = messageTelegram + String("auxState1 = ") + String(auxState1) + String(" fuseState1 = ") + String(fuseState1) + String(" ssrState1 = ") + String(ssrState1) + String("\n");
      messageTelegram = messageTelegram + String("auxState2 = ") + String(auxState2) + String(" fuseState2 = ") + String(fuseState2) + String(" ssrState2 = ") + String(ssrState2) + String("\n");
      messageTelegram = messageTelegram + String("auxState3 = ") + String(auxState3) + String(" fuseState3 = ") + String(fuseState3) + String(" ssrState3 = ") + String(ssrState3) + String("\n");
      */

      
      // messageTelegram = messageTelegram + String("Line 1 = ") + String(realVoltageLine1) + String(" V\n");
      // messageTelegram = messageTelegram + String("Line 2 = ") + String(realVoltageLine2) + String(" V\n");
      // messageTelegram = messageTelegram + String("Line 3 = ") + String(realVoltageLine3) + String(" V\n\n");
      
      // messageTelegram = messageTelegram + String("Line 1 = ") + String(average_line1) + String(" bit\n");
      // messageTelegram = messageTelegram + String("Line 2 = ") + String(average_line2) + String(" bit\n");
      // messageTelegram = messageTelegram + String("Line 3 = ") + String(average_line3) + String(" bit\n\n");
      
      // messageTelegram = messageTelegram + String("Line 1 = ") + String(averageDI1) + String(" bit\n");
      // messageTelegram = messageTelegram + String("Line 2 = ") + String(averageDI2) + String(" bit\n");
      // messageTelegram = messageTelegram + String("Line 3 = ") + String(averageDI3) + String(" bit\n\n");   
    }
  }
}

void makeIFTTTRequest() {
  Serial.print("tProgress.txt=\"");
  Serial.print("Connecting to \""); 
  Serial.print(serverIFTTT);
  Serial.print("\""); 
  printnextion();
  
  WiFiClient client;
  int retries = 5;
  while(!!!client.connect(serverIFTTT, 80) && (retries-- > 0)) {
    Serial.print("tProgress.txt=\"");
    Serial2.print(". . . \"");
    printnextion();
  }
  if(!!!client.connected()) {
    Serial.print("tProgress.txt=\"");
    Serial.print("Failed to connect...\"");
    printnextion();
  }
  
  Serial.print("tProgress.txt=\"");
  Serial.print("Request resource: \"");  
  Serial.print(resource);
  Serial.print("\""); 
  printnextion();

  // Temperature in Celsius
  String jsonObject = String("{\"value1\":\"") + value1 + "\",\"value2\":\"" + value2
                      + "\",\"value3\":\"" + value3 + "\"}";
                       
  client.println(String("POST ") + resource + " HTTP/1.1");
  client.println(String("Host: ") + serverIFTTT); 
  client.println("Connection: close\r\nContent-Type: application/json");
  client.print("Content-Length: ");
  client.println(jsonObject.length());
  client.println();
  client.println(jsonObject);
        
  int timeout = 5 * 10; // 5 seconds             
  while(!!!client.available() && (timeout-- > 0)){
    delay(100);
  }
  if(!!!client.available()) {
    Serial.print("tProgress.txt=\"");
    Serial.print("No response...\"");
    printnextion();
  }
  while(client.available()){
    Serial2.write(client.read());
  }
  
  Serial.print("tProgress.txt=\"");
  Serial.print("Closing connection\"");
  printnextion();
  client.stop(); 
}

void initWifi() {
  Serial.print("tLog15.txt=\"");
  Serial.print("Start scan Wi-Fi connection . . .\"");
  printnextion();

  boolean wifiFound = false;
  int i, n;

  // Set WiFi to station mode and disconnect from an AP if it was previously connected
  WiFi.mode(WIFI_AP);
  WiFi.disconnect();
  delay(100);
  Serial.println("Setup done");

  // WiFi.scanNetworks will return the number of networks found
  Serial.println(F("scan start"));
  int nbVisibleNetworks = WiFi.scanNetworks();
  Serial.println(F("scan done"));
  if (nbVisibleNetworks == 0) {
    Serial.println(F("no networks found. Reset to try again"));
    while (true); // no need to go further, hang in there, will auto launch the Soft WDT reset
  }

  // if you arrive here at least some networks are visible
  Serial.print(nbVisibleNetworks);
  Serial.println(" network(s) found");

  // check if we recognize one by comparing the visible networks one by one with our list of known networks
  for (i = 0; i < nbVisibleNetworks; ++i) {
    Serial.println(WiFi.SSID(i)); // Print current SSID
    for (n = 0; n < KNOWN_SSID_COUNT; n++) { // walk through the list of known SSID and check for a match
      if (strcmp(KNOWN_SSID[n], WiFi.SSID(i).c_str())) {
        Serial.print(F("\tNot matching "));
        Serial.println(KNOWN_SSID[n]);
      } else { // we got a match
        wifiFound = true;
        break; // n is the network index we found
      }
    } // end for each known wifi SSID
    if (wifiFound) break; // break from the "for each visible network" loop
  } // end for each visible network

  if (!wifiFound) {
    wifiState = 0;
    Serial.println(F("no Known network identified. Reset to try again"));
  } else {
    wifiState = 1;
  }

  // if you arrive here you found 1 known SSID
  Serial.print(F("\nConnecting to "));
  Serial.println(KNOWN_SSID[n]);


  // We try to connect to the WiFi network we found
  WiFi.begin(KNOWN_SSID[n], KNOWN_PASSWORD[n]);
  
  
  if (KNOWN_SSID[n] == "Galaxy-Deny"){
    ssidState = 1;
  } else if (KNOWN_SSID[n] == "INFORMATION CENTER"){
    ssidState = 2;
  } else {
    ssidState = 3;
  }

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial2.print(".");
  }
  Serial2.println("");
  
  Serial.print("tLog16.txt=\"");
  Serial.print("[OK] Wi-Fi connected, your SSID is ");
  // Serial.print(KNOWN_SSID[n]);
  Serial.print("\"");
  printnextion();

  // SUCCESS, you are connected to the known WiFi network
  Serial2.println(F("WiFi connected , your IP address is "));
  Serial2.println(WiFi.localIP());

  Serial.print("tLog17.txt=\"");
  Serial.print("[OK] Wi-Fi connected, your IP address is ");
  Serial.print(WiFi.localIP());
  Serial.print("\"");
  printnextion();

  
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
    request->send(200, "text/plain", "Hi! I am ESP32.");
  });

  AsyncElegantOTA.begin(&server);
  server.begin();

  // Serial2.println("Sampai sini");

  Serial.print("tLog18.txt=\"");
  Serial.print("[OK] OTA connected\"");
  printnextion();
  // Serial2.println("Sampai sini");

}

void device1(){
  DateTime now = rtc.now();
  String timestampDev1 = String(now.year(), DEC) + String("/") + String(now.month(), DEC) + String("/") + String(now.day(), DEC) + String(", ") + String(now.hour(), DEC) + String(":") + String(now.minute(), DEC) + String(":") + String(now.second(), DEC);
  
  if(millis() >= time_1 + slcDev1){
    time_1 += slcDev1;
    Serial.print("tProgress.txt=\"");
    Serial.print("Requesting data to Device-1 . . .\""); 
    printnextion();
    digitalWrite(Enable, HIGH);
    Serial2.print("I");
    Serial2.print("1");
    Serial2.print("L");
    Serial2.print("F");
    Serial2.flush();
    digitalWrite(Enable, LOW);
    
    if(Serial2.find("i")) {   
      int slave1 = Serial2.parseInt();
      value1 = Serial2.parseInt();
      if(Serial2.read() == 'f' && slave1 == 1) {
        Serial.print("tVal1.txt=\"");
        Serial.print(value1);
        Serial.print("\"");
        printnextion();
        Serial.print("tTime1.txt=\"");
        Serial.print(timestampDev1);
        Serial.print("\"");
        printnextion();
        Serial.print("tTimeAvg.txt=\"");
        Serial.print(timestampDev1);
        Serial.print("\"");
        printnextion();

        if (sdCardState == 1) {
          Serial.print("tProgress.txt=\"");
          Serial.print("Saving to SD card . . .\"");
          printnextion();
          String payload = String(now.unixtime()) + String(";") + String(value1) + String(";") + String(value2) + String(";") + String(value3) + String(";");
          String filePath = String("/") + String(now.day(), DEC) + String(now.month(), DEC) + String(now.year(), DEC);
          writeFile(SD, filePath, payload);
          // writeFile(SD, "/logger.txt", payload);
          Serial.print("tProgress.txt=\"");
          Serial.print("Data saved to SD card (logger.txt)\"");
          printnextion();
        }

        Serial.print("tProgress.txt=\"");
        Serial.print("Push data to cloud . . .\"");
        printnextion();
        makeIFTTTRequest();
      }
    }
  }
}

void device2(){
  DateTime now = rtc.now();
  String timestampDev2 = String(now.year(), DEC) + String("/") + String(now.month(), DEC) + String("/") + String(now.day(), DEC) + String(", ") + String(now.hour(), DEC) + String(":") + String(now.minute(), DEC) + String(":") + String(now.second(), DEC);
  
  if(millis() >= time_2 + slcDev2){
    time_2 += slcDev2;
    Serial.print("tProgress.txt=\"");
    Serial.print("Requesting data to Device-2 . . .\""); 
    printnextion();
    digitalWrite(Enable, HIGH);
    Serial2.print("I");
    Serial2.print("2");
    Serial2.print("L");
    Serial2.print("F");
    Serial2.flush();
    digitalWrite(Enable, LOW);
    
    if(Serial2.find("i")) {   
      int slave2 = Serial2.parseInt();
      value2 = Serial2.parseInt();
      if(Serial2.read() == 'f' && slave2 == 2) {
        Serial.print("tVal2.txt=\"");
        Serial.print(value2);
        Serial.print("\"");
        printnextion();
        Serial.print("tTime2.txt=\"");
        Serial.print(timestampDev2);
        Serial.print("\"");
        printnextion();
        Serial.print("tTimeAvg.txt=\"");
        Serial.print(timestampDev2);
        Serial.print("\"");
        printnextion();

        if (sdCardState == 1) {
          Serial.print("tProgress.txt=\"");
          Serial.print("Saving to SD card . . .\"");
          printnextion();
          String payload = String(now.unixtime()) + String(";") + String(value1) + String(";") + String(value2) + String(";") + String(value3) + String(";");
          String filePath = String("/") + String(now.day(), DEC) + String(now.month(), DEC) + String(now.year(), DEC);
          writeFile(SD, filePath, payload);
          // writeFile(SD, "/logger.txt", payload);
          Serial.print("tProgress.txt=\"");
          Serial.print("Data saved to SD card (logger.txt)\"");
          printnextion();
        }

        Serial.print("tProgress.txt=\"");
        Serial.print("Push data to cloud . . .\"");
        printnextion();
        makeIFTTTRequest();
      }
    }
  }
}

void device3(){
  DateTime now = rtc.now();
  String timestampDev3 = String(now.year(), DEC) + String("/") + String(now.month(), DEC) + String("/") + String(now.day(), DEC) + String(", ") + String(now.hour(), DEC) + String(":") + String(now.minute(), DEC) + String(":") + String(now.second(), DEC);
  
  if(millis() >= time_3 + slcDev3){
    time_3 += slcDev3;
    Serial.print("tProgress.txt=\"");
    Serial.print("Requesting data to Device-3\""); 
    printnextion();
    digitalWrite(Enable, HIGH);
    Serial2.print("I");
    Serial2.print("3");
    Serial2.print("L");
    Serial2.print("F");
    Serial2.flush();
    digitalWrite(Enable, LOW);
    
    if(Serial2.find("i")) {   
      int slave3 = Serial2.parseInt();
      value3 = Serial2.parseInt();
      if(Serial2.read() == 'f' && slave3 == 3) {
        Serial.print("tVal3.txt=\"");
        Serial.print(value3);
        Serial.print("\"");
        printnextion();
        Serial.print("tTime3.txt=\"");
        Serial.print(timestampDev3);
        Serial.print("\"");
        printnextion();
        Serial.print("tTimeAvg.txt=\"");
        Serial.print(timestampDev3);
        Serial.print("\"");
        printnextion();

        if (sdCardState == 1) {
          Serial.print("tProgress.txt=\"");
          Serial.print("Saving to SD card . . .\"");
          printnextion();
          String payload = String(now.unixtime()) + String(";") + String(value1) + String(";") + String(value2) + String(";") + String(value3) + String(";");
          String filePath = String("/") + String(now.day(), DEC) + String(now.month(), DEC) + String(now.year(), DEC);
          writeFile(SD, filePath, payload);
          // writeFile(SD, "/logger.txt", payload);
          Serial.print("tProgress.txt=\"");
          Serial.print("Data saved to SD card (logger.txt)\"");
          printnextion();
        }

        Serial.print("tProgress.txt=\"");
        Serial.print("Push data to cloud . . .\"");
        printnextion();
        makeIFTTTRequest();
      }
    }
  }
}

void powerCheck() {
  adc0Val = analogRead(adc0);
  adc1Val = analogRead(adc1);
  
  if (adc0Val < 2500) {
    relay0State = 0;
    mainPowerState = 1;
    digitalWrite(relay0, 0);
  } else {
    relay0State = 1;
    mainPowerState = 0;
    digitalWrite(relay0, 1);
  }

  if (adc1 < 3000) {
    batPowerState = 1;
  } else {
    batPowerState = 0;
  }
}

void setup() { 
  Serial.begin(9600);
  Serial2.setTimeout(250);
  Serial2.begin(9600, SERIAL_8N1, RXD2, TXD2);
  Wire.begin();
  pinMode(Enable, OUTPUT);

  delay(3000);
  Serial.print("tLog0.txt=\"");
  Serial.print("System starting . . .\"");
  printnextion();

  delay(1000);
  checkPeripheral();
  initWifi();

  // Serial.println("Setup finish");

  // print status hijau device
}

void loop() {
  // Serial.println("Looping");
  
  DateTime now = rtc.now();
  String timestamp = String(now.year(), DEC) +"/"+ (now.month(), DEC) +"/"+ (now.day(), DEC) +", "+ (now.hour(), DEC) +":"+ (now.minute(), DEC) +":"+ (now.second(), DEC);

  if (wifiState == 1) {
    AsyncElegantOTA.loop();

    if (millis() > lastTimeBotRan + botRequestDelay)  {
      int numNewMessages = bot.getUpdates(bot.last_message_received + 1);

      while(numNewMessages) {
        Serial2.println("got response");
        handleNewMessages(numNewMessages);
        numNewMessages = bot.getUpdates(bot.last_message_received + 1);
      }
      lastTimeBotRan = millis();
    }
  }

  if (time_1 == time_2) {
    time_1 += 1000;
  } else if (time_1 == time_3) {
    time_3 += 1000;
  } else if (time_2 == time_3) {
    time_2 += 1000;
  }

  if ((now.hour() > 3) || (now.hour() < 19)) {
    stateMaster = 1;
  } else {
    stateMaster = 0;
  }

  if (stateMaster == 1 && batPowerState == 1 && state1 == 1 && state2 == 1 && state3 == 1) {
    device1();
    device2();
    device3();
    averageValue = (value1+value2+value3)/3;
    Serial.print("tValAvg.txt=\"");
    Serial.print(averageValue);
    Serial.print("\"");
    printnextion();
  } else if (stateMaster == 1 && batPowerState == 1 && state1 == 1 && state2 == 1 && state3 == 0) {
    device1();
    device2();
    averageValue = (value1+value2)/2;
    Serial.print("tValAvg.txt=\"");
    Serial.print(averageValue);
    Serial.print("\"");
    printnextion();
  } else if (stateMaster == 1 && batPowerState == 1 && state1 == 1 && state2 == 0 && state3 == 1) {
    device1();
    device3();
    averageValue = (value1+value3)/2;
    Serial.print("tValAvg.txt=\"");
    Serial.print(averageValue);
    Serial.print("\"");
    printnextion();
  } else if (stateMaster == 1 && batPowerState == 1 && state1 == 0 && state2 == 1 && state3 == 1) {
    device2();
    device3();
    averageValue = (value2+value3)/2;
    Serial.print("tValAvg.txt=\"");
    Serial.print(averageValue);
    Serial.print("\"");
    printnextion();
  } else if (stateMaster == 1 && batPowerState == 1 && state1 == 1 && state2 == 0 && state3 == 0) {
    device1();
    averageValue = value1;
    Serial.print("tValAvg.txt=\"");
    Serial.print(averageValue);
    Serial.print("\"");
    printnextion();
  } else if (stateMaster == 1 && batPowerState == 1 && state1 == 0 && state2 == 1 && state3 == 0) {
    device2();
    averageValue = value2;
    Serial.print("tValAvg.txt=\"");
    Serial.print(averageValue);
    Serial.print("\"");
    printnextion();
  } else if (stateMaster == 1 && batPowerState == 1 && state1 == 0 && state2 == 0 && state3 == 1) {
    device3();
    averageValue = value3;
    Serial.print("tValAvg.txt=\"");
    Serial.print(averageValue);
    Serial.print("\"");
    printnextion();
  } else {
    Serial.print("tProgress.txt=\"");
    Serial.print("No device connected\""); 
    printnextion();
    // print tidak konek semua
  }
  
}